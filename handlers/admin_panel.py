from aiogram.types import ( InlineKeyboardButton, 
                            InlineKeyboardMarkup, 
                            KeyboardButton, 
                            ReplyKeyboardMarkup, 
                            ReplyKeyboardRemove,
                            Message
                            )
from aiogram import F, Router, types,Bot
from aiogram.types.input_file import FSInputFile 
from aiogram.filters import Command,CommandStart,BaseFilter
from config import ADMINS
import DataBase.request as db
from aiogram.fsm.context import FSMContext 
from states import *
from pathlib import Path
from .keyboard import *
import logging
router=Router()
edit_table=False

class AdminFilter(BaseFilter):
    def __init__(self):
        super().__init__()

    async def __call__(self, message: Message) -> bool:
        result=message.from_user.id in ADMINS
        return result
@router.message(AdminFilter(),CommandStart())
@router.message(AdminFilter(),Command('start'))
async def start_handler(msg:Message,state:FSMContext):
    await msg.answer_sticker(r"CAACAgQAAxkBAAED3Q1l5EuHETdkCgz_OEPKmjcPJXwyxQACAwYAAgtetBq169NzfwFttTQE")#,reply_markup=kb)
    await msg.answer(f"–í—ã –∞–¥–º–∏–Ω",reply_markup=kb_admin_main) 
    await msg.answer(msg_admin_start)  
@router.message(AdminFilter(),Command('menu'))
@router.message(AdminFilter(),F.text=="menu")
async def menu(msg:Message,state:State):
    global edit_table
    await state.clear() 
    await msg.answer(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",reply_markup=kb_admin_main) 
    edit_table=False
@router.message(Command('id'))
@router.message(F.text=="id")
async def massage_id(msg:Message):
    await msg.answer(f"–í–∞—à ID: {msg.from_user.id}")

@router.message(AdminFilter(),Command('edit'))
@router.message(AdminFilter(),F.text.in_(["edit","Edit","–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü üßæ"]))
async def edir_table_status(msg:Message,state:FSMContext):
    global edit_table
    edit_table=not edit_table
    if edit_table:
        await msg.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[   
            [KeyboardButton(text="–†–∞–±–æ—Ç—ã"),KeyboardButton(text="–ì—Ä—É–ø–ø—ã")],
            [KeyboardButton(text="–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"),KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ]),resize_keyboard=True)
        await state.set_state(Table.choice_table)
    else:
        await msg.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        await state.clear()
        await menu(msg,state)
@router.message(AdminFilter(),Table.choice_table)
async def table(msg:Message,state:FSMContext):
    await state.update_data(choice_table=msg.text)
    kbs={"–†–∞–±–æ—Ç—ã":kb_admin_works,
         "–ì—Ä—É–ø–ø—ã":kb_admin_group,
         "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã":kb_admin_discipline}
    if msg.text=="–ù–∞–∑–∞–¥":
        await msg.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        await state.clear()
        await menu(msg,state)
    elif msg.text in kbs:
        await msg.answer(f"""
    –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É "{msg.text}"
    –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ!
                              """, reply_markup= kbs[msg.text])
        await state.set_state(Table.choice_operation)

@router.message(AdminFilter(),Table.choice_operation)
async def set_operation(msg:Message, state:FSMContext):
    await state.update_data(choice_operation=msg.text)
    if msg.text=="–ù–∞–∑–∞–¥":
        await menu(msg,state)
    elif msg.text in ["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É","–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã","–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É"]:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",reply_markup=await kb_return_discipline("discipline sel work"))
        await msg.answer("",reply_markup=ReplyKeyboardRemove())
    elif msg.text=="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É":
        await msg.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    elif msg.text=="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",reply_markup=ReplyKeyboardRemove())
        await state.set_state(Table.set_data)
    elif msg.text=="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã":
        await msg.answer("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:",reply_markup=await kb_return_group("info group"))
        state.set_state(Table.choice_operation)
    elif msg.text=="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–º—è",
                         reply_markup=await kb_return_group("group"))  
    elif msg.text=="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É":
        await msg.answer("–ù–∞–∂–º–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",reply_markup=await kb_return_group("group del"))
    elif msg.text=="–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",reply_markup=ReplyKeyboardRemove())
        await state.set_state(Table.set_data)
    elif msg.text=="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã":
        await msg.answer("–°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω:",reply_markup=await kb_return_discipline("info discipline"))
    elif msg.text=="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await msg.answer("–°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω:",reply_markup=await kb_return_discipline("update discipline"))
    elif msg.text=="–£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await msg.answer("–ù–∞–∂–º–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",reply_markup=InlineKeyboardMarkup(inline_keyboard=await kb_return_discipline("discipline del")))
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        await state.set_state(Table.choice_operation)
@router.message(Table.set_data,F.text.in_(["–ù–∞–∑–≤–∞–Ω–∏–µ","–§–∞–π–ª","–û—Ç–º–µ–Ω–∞"]))
async def update_work(msg:Message, state:FSMContext):
    await state.update_data(set_col=msg.text)
    if msg.text=="–ù–∞–∑–≤–∞–Ω–∏–µ":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Table.set_data)
    elif msg.text=="–§–∞–π–ª":
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Table.document)
    elif msg.text=="–û—Ç–º–µ–Ω–∞":
        await msg.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=ReplyKeyboardMarkup(
            keyboard=[[]]
        ))
@router.message(Table.set_data)
async def set_data(msg:Message, state:FSMContext):
    operation = await state.get_data()
    if operation is None:
        pass
    if operation['choice_operation']=="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É":
        await state.update_data(set_data=msg.text)
        await msg.answer("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?",reply_markup=ReplyKeyboardMarkup(keyboard=
                            [
                                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),KeyboardButton(text="–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")]
                                                      ],resize_keyboard=True)
                        )
        await state.set_state(Table.document)
    elif operation['choice_operation']=="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É":    
        await db.add("group",[(msg.text)])
        await msg.answer("–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç –µ—â–µ?",reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≥—Ä—É–ø–ø—É"),KeyboardButton(text="–ù–∞–∑–∞–¥")]],resize_keyboard=True))    
        await state.set_state(Table.repite)
    elif operation['choice_operation']=="–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await state.update_data(set_data=msg.text)
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",reply_markup=await kb_return_group("discipline group"))
    elif operation['choice_operation']=="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        await db.update_col("group", (operation['group_id'],(msg.text)))
        await msg.answer("–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!",reply_markup=kb_admin_group)
        await state.set_state(Table.choice_operation)
    elif operation['choice_operation']=="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await db.update_col("discipline", (operation['discipline_id'], (msg.text)))
        await msg.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!",reply_markup=kb_admin_discipline)
        await state.clear()
        await state.set_state(Table.choice_operation)
    elif operation['choice_operation']=="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É" and "set_col" in operation:
        if operation["set_col"]=="–ù–∞–∑–≤–∞–Ω–∏–µ":
            work=await db.return_work(operation["work_id"])
            await db.update_col("works", (operation['work_id'], msg.text,operation["discipline_id"],work.path))
        elif operation["set_col"]=="–î–æ–∫—É–º–µ–Ω—Ç":
            await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup="")
            await state.set_state(Table.document)
        await msg.answer("–†–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",reply_markup=kb_admin_works)
        await state.clear()
        await state.set_state(Table.choice_operation)
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        await state.set_state(Table.set_data)
@router.message(Table.repite)
async def repite(msg:Message, state:FSMContext):
    if msg.text=="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≥—Ä—É–ø–ø—É":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",reply_markup=ReplyKeyboardRemove())    
        await state.set_state(Table.set_data)
    elif msg.text=="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",reply_markup=ReplyKeyboardRemove()) 
        await state.set_state(Table.set_data)
    elif msg.text=="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:")
        await state.set_state(Table.set_data)
    elif msg.text=="–ù–∞–∑–∞–¥":
        await edir_table_status(msg, state)
    
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        await state.set_state(Table.repite)
@router.callback_query(F.data.regexp(r"discipline \d+"))
async def callback_group(msg:Message, state:FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    await state.update_data(group_id=msg.text.split()[1])
    await state.set_state(Table.set_data)
@router.callback_query(F.data.regexp(r"group \d+"))
async def callback_info_group(call:types.CallbackQuery,state:FSMContext):
    group_id=int(call.data.split()[-1])
    await state.update_data(group_id=group_id) 
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",reply_markup=ReplyKeyboardRemove())
    await state.set_state(Table.set_data)
@router.callback_query(F.data.regexp(r'group del \d+'))
async def callback_del_group(call:types.CallbackQuery,state:FSMContext):
    group_id=int(call.data.split()[-1])
    await state.update_data(group_id=group_id)
    await call.message.answer("–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",reply_markup=InlineKeyboardMarkup(inline_keyboard=
                            [
                                [InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data=f"choice yes"),InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data=f"choice no") ] ])
                        )
@router.callback_query(F.data.regexp(r'choice (yes|no)'))
async def callback_del_group(call:types.CallbackQuery, state:FSMContext):
    if call.data.split()[-1]=="yes":
        operation=await state.get_data()
        if operation["choice_operation"]=="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É":
            await db.delete_col("group", operation['group_id'])
            await call.message.answer("–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞!")
        elif operation["choice_operation"]=="–£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
            await db.delete_col("discipline", operation['discipline_id'])
            await call.message.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!")
        elif operation["choice_operation"]=="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É":
            await db.delete_col("works", operation['work_id'])
            await call.message.answer("–†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
        elif operation["choice_operation"]=="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞":
            await db.delete_col("works_student", operation['works_student_id'])
            await call.message.answer("–†–∞–±–æ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await call.message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞!")
    await state.clear()
@router.callback_query(F.data.regexp(r'discipline group \d+'))
async def callback_discipline(call:types.CallbackQuery,state:FSMContext):
    group_id=int(call.data.split()[-1])
    data=await state.get_data()
    group=await db.return_group(group_id)
    await state.update_data(group_id=group_id)
    await call.message.answer(f"""
    –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:{data["set_data"]}
    –ì—Ä—É–ø–ø–∞:{group.name}
    """,reply_markup=ReplyKeyboardRemove())
    await db.add("discipline", [(data['set_data'], group_id)])
    await call.message.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç –µ—â–µ?", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"), KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True))
    await state.set_state(Table.repite)
@router.callback_query(F.data.regexp(r"discipline del \d+")) 
async def callback_del_discipline(call:types.CallbackQuery,state:FSMContext):
    discipline_id=int(call.data.split()[-1])
    await state.update_data(discipline_id=discipline_id)
    await call.message.answer("–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",reply_markup=InlineKeyboardMarkup(inline_keyboard=
                            [
                                [InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data=f"choice yes"),InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data=f"choice no") ] ])
                        )
@router.callback_query(F.data.regexp(r"discipline sel work \d+"))
async def callback_work(call:types.CallbackQuery,state:FSMContext):
    discipline_id=int(call.data.split()[-1])
    await state.update_data(discipline_id=discipline_id)
    data=await state.get_data()
    if data["choice_operation"]=="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã":
        await call.message.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç:",
                         reply_markup=await kb_return_works(discipline_id,"student get work")
                        )
        await state.set_state(Table.get_work)
    elif data["choice_operation"]=="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:",reply_markup= ReplyKeyboardRemove())
        await state.set_state(Table.set_data)
    elif data["choice_operation"]=="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É":
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup= await kb_return_works(discipline_id, "work update"))

@router.message(Table.document,F.text.in_(["–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç","–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"]))
async def add_work(msg:Message,state:FSMContext):
    data=await state.get_data()
    if msg.text=="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç":
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:")
        await state.set_state(Table.document)
    else:
        await db.add("works", [(data['set_data'], data['discipline_id'],None)])
        await msg.answer("–†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç –µ—â–µ?", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É"), KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True))
        await state.set_state(Table.repite)

@router.message(Table.document, F.document)
async def add_document(msg:Message,state:FSMContext,bot:Bot):
    data=await state.get_data()
    disc=await db.return_discipline(data['discipline_id'])
    path= Path(__file__).parent.parent / "files"/"documents"/disc[-1].name 
    path=path.resolve()
    path.mkdir(parents=True, exist_ok=True)
    path/=msg.document.file_name 
    path=path.resolve()
    await bot.download(file=msg.document, destination=path)
    if "set_col" in data:
        work=await db.return_work(data['work_id'])
        await db.update_col("works", (data['work_id'], work.name, data['discipline_id'],str(path)))
        await msg.answer("–†–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",reply_markup=kb_admin_works)
        await state.clear()
        await state.set_state(Table.choice_operation)
    else:
        await db.add("works", [(data['set_data'], data['discipline_id'],str(path))])
        await msg.answer("–†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç –µ—â–µ?", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É"), KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True))
        await state.set_state(Table.repite)

@router.callback_query(F.data.regexp(r"work del \d+"))
async def callback_del_work(call:types.CallbackQuery, state:FSMContext):
    work_id=int(call.data.split()[-1])
    await state.update_data(work_id=work_id)
    await call.message.answer("–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",reply_markup=InlineKeyboardMarkup(inline_keyboard=
                            [
                                [InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data=f"choice yes"),InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data=f"choice no") ] ])
                        )
    await state.set_state(Table.set_data)
@router.callback_query(F.data.regexp(r"work update \d+"))
async def callback_update_work(call:types.CallbackQuery, state:FSMContext):
    work_id=int(call.data.split()[-1])
    await state.update_data(work_id=work_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ"),KeyboardButton(text="–§–∞–π–ª")],
                   [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(Table.set_data)
@router.callback_query(F.data.regexp(r"update discipline \d+"))
async def update_disc(call:types.CallbackQuery, state:FSMContext):
    discipline_id=int(call.data.split()[-1])
    await state.update_data(discipline_id=discipline_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Table.set_data)
@router.message(AdminFilter(),F.text=='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã üîé')
async def view_works(msg:Message, state:FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=await kb_return_discipline("discipline check work"))
    await state.update_data(choice_operation="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã")
    await state.set_state(CheckWork.choice_discipline)
@router.callback_query(CheckWork.choice_discipline,F.data.regexp(r"discipline check work \d+"))
async def callback_work(call:types.CallbackQuery, state:FSMContext):
    discipline_id=int(call.data.split()[-1])
    kb,data=await kb_retutn_students_work( discipline_id,"student check work")
    await state.update_data(discipline_id=discipline_id,student=data)
    await call.message.answer("–†–∞–±–æ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ", reply_markup=kb )
    await state.set_state(CheckWork.choice_student)
@router.callback_query(CheckWork.choice_student, F.data.regexp(r"student check work \d+"))
async def callback_work(call:types.CallbackQuery, state:FSMContext,bot:Bot):
    id_student=int(call.data.split()[-1])
    data=await state.get_data()
    id_disciplite=data["discipline_id"]
    data=data["student"]
    await call.message.answer(f"–†–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ {data[id_student]['name']}({data[id_student]['group']}):")
    for work in data[id_student]["works"]:
        row=await db.return_student_work_none(id_disciplite,work)
        row=row[-1]
        file_input = FSInputFile(row["path"])
        await bot.send_document(call.message.chat.id,file_input ,
                caption=f"{row['name_work']}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept {row['id']} {row['id_student']}"),
        InlineKeyboardButton(text="‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç—å", callback_data=f"reject {row['id']} {row['id_student']}")]
    ]))
    logging.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–±–æ—Ç—ã!")
@router.callback_query(F.data.regexp(r"accept \d+ \d+"))
async def callback_accept(call:types.CallbackQuery, state:FSMContext,bot:Bot):
    id_work,id_student=map(int,call.data.split()[1:])
    await db.accept_work(id_work,True)
    #await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    #    [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"")]]))
    data=await db.return_work_accept(id_work)
    work_name,discipline_name,path=data
    await bot.send_message(chat_id=id_student, text=f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}\n–†–∞–±–æ—Ç–∞: {work_name}\n–°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–∏–Ω—è—Ç–∞")
    await call.answer()
@router.callback_query(F.data.regexp(r"reject \d+ \d+"))
async def callback_reject(call:types.CallbackQuery, state:FSMContext, bot:Bot):
    id_work,id_student=map(int, call.data.split()[1:])
    await state.update_data(id_work=id_work,id_student=id_student)
    await db.accept_work(id_work, False)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–æ—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:")
    await state.set_state(CheckWork.check_work)
@router.message(AdminFilter(),CheckWork.check_work)
async def msg_reject(msg:Message, state:FSMContext, bot:Bot):
    data=await state.get_data()
    id_work,id_student=data["id_work"],data["id_student"]    
    data=await db.return_work_accept(id_work)
    work_name,discipline_name,path=data
    await bot.send_document(chat_id=id_student, document=FSInputFile(path), 
        caption=f"""
–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}
–†–∞–±–æ—Ç–∞: {work_name}
–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–∞
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {msg.text}""")
    msg.answer()

@router.message(AdminFilter(),F.text=="–û—Ç—á–µ—Ç üì†")
async def report(msg:Message, state:FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=await kb_return_discipline("discipline report"))
    await state.set_state(Report.choice_discipline)
@router.callback_query(F.data.regexp(r"discipline report \d+"))
async def callback_discipline(call:types.CallbackQuery, state:FSMContext):
    discipline_id=int(call.data.split()[-1])
    await state.update_data(discipline_id=discipline_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=await kb_return_group("group report"))
    await state.set_state(Report.choice_group)
