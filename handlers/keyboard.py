import DataBase.request as db
from aiogram.types import ( InlineKeyboardButton, 
                            InlineKeyboardMarkup, 
                            KeyboardButton, 
                            ReplyKeyboardMarkup)
msg_admin_start="""
        –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
    /start          - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    /status         - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ 
    /edit           - –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö     
    /works          - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    /menu           -–≤—ã–∑–æ–≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
msg_student_start="""
        –£ –≤–∞—Å —Å—Ç–∞—Ç—É—Å "–°—Ç—É–¥–µ–Ω—Ç"!.
        –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
    /start          - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    /registration   - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    /menu           - –≤—ã–∑–æ–≤ –º–µ–Ω—é
        """
kb_admin_main=ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü üßæ"), KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã üîé")],
                                [ KeyboardButton(text="–û—Ç—á–µ—Ç üì†"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üßæ")],
                                [ KeyboardButton(text="–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üßæ")]],
                                resize_keyboard=True)                    
kb_student_main=ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text="–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—Éüßæ"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ä–∞–±–æ—Ç")],
                                [ KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—ÉüëÅ‚Äçüó®"),KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ωüìù")]],
                                resize_keyboard=True)
kb_admin_works=ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É"),KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã")],
                                [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É"),KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É")],
                                [KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                                resize_keyboard=True)
kb_admin_group=ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"),KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã")],
                                [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"),KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")],
                                [KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                                resize_keyboard=True)
kb_admin_discipline=ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"),KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")],
                                [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"),KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")],
                                [KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                                resize_keyboard=True)
async def kb_return_works(discipline_id:int, call_text:str=None):
    works=await db.return_work("works",id_discipline=discipline_id)
    kb=InlineKeyboardMarkup(inline_keyboard=
                            [
                                [InlineKeyboardButton(text=f"{work.name}üìÑ{'‚úÖ'if work.path else '‚ùå'}",
                                                      callback_data=f"{call_text if call_text else ''} {work.id}")]
                                                      for work in works])
    return kb
async def kb_return_discipline(call_text:str):
    kb=InlineKeyboardMarkup(inline_keyboard=
                            [
                                [InlineKeyboardButton(text=discipline.name, 
                                                      callback_data=f"{call_text} {discipline.id}")] 
                                                      for discipline in await db.return_all("discipline")])
    return kb 
async def kb_return_group(call_text:str,discipline_id:int=None):
    if discipline_id:
        pass
    else:
        kb=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=group.name, callback_data=f"{call_text} {group.id}")] for group in await db.return_all("group")])
    return kb
async def kb_return_disciplin_id(call_text:str,id_student:int):
    student=await db.return_student(id_student)
    kb=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=student.name, callback_data=f"{call_text} {student.id}")] for student in await db.return_discipline("",id_group=student[-1].id_group)])
    return kb
async def kb_return_student_works(id_student,id_discipline,call_text:str):
    data=await db.retutn_works_student_all(id_student, id_discipline)
    status={True:"‚úÖ",False:"‚ùå",None:"üïñ"}
    kb=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{name} {status[accept]}", callback_data=f"{call_text} {id}")] for id,name,accept in data])
    return kb
async def kb_retutn_students_work(id_discipline:int,call_text:str):
    data=await db.return_student_work_none(id_discipline)
    kb=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f'{shorten_name(data[id_student]["name"])}({data[id_student]["group"]})-{len(data[id_student]["works"])}', callback_data=f"{call_text} {id_student}")] for id_student in data])
    return kb,data

def shorten_name(full_name):
    parts = full_name.split()
    if len(parts) < 2:
        return full_name
    last_name = parts[-1]
    initials = [f"{part[0]}." for part in parts[:-1]]
    return f"{' '.join(initials)} {last_name}"